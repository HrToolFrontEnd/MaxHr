{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { useState, useCallback, useRef } from 'react';\nimport addStyle from 'dom-lib/addStyle';\nimport addClass from 'dom-lib/addClass';\nimport removeClass from 'dom-lib/removeClass';\nimport omit from 'lodash/omit';\nimport merge from 'lodash/merge';\nimport { SCROLLBAR_WIDTH, SORT_TYPE } from '../constants';\nimport useControlled from './useControlled';\nimport getTableColumns from './getTableColumns';\nimport getTotalByColumns from './getTotalByColumns';\nimport getColumnProps from './getColumnProps';\nimport useUpdateEffect from './useUpdateEffect';\n/**\n * Attach rendering-related attributes to all cells of the form and cache them.\n * @param props\n * @returns\n */\n\nvar useCellDescriptor = function useCellDescriptor(props) {\n  var children = props.children,\n      rtl = props.rtl,\n      mouseAreaRef = props.mouseAreaRef,\n      tableRef = props.tableRef,\n      minScrollX = props.minScrollX,\n      scrollX = props.scrollX,\n      tableWidth = props.tableWidth,\n      headerHeight = props.headerHeight,\n      showHeader = props.showHeader,\n      sortTypeProp = props.sortType,\n      defaultSortType = props.defaultSortType,\n      sortColumn = props.sortColumn,\n      rowHeight = props.rowHeight,\n      onSortColumn = props.onSortColumn,\n      onHeaderCellResize = props.onHeaderCellResize,\n      prefix = props.prefix;\n\n  var _useControlled = useControlled(sortTypeProp, defaultSortType),\n      sortType = _useControlled[0],\n      setSortType = _useControlled[1];\n\n  var _useState = useState(),\n      cacheData = _useState[0],\n      setCacheData = _useState[1];\n\n  var clearCache = useCallback(function () {\n    setCacheData(null);\n  }, []);\n  var setColumnResizing = useCallback(function (resizing) {\n    if (!tableRef.current) {\n      return;\n    }\n\n    if (resizing) {\n      addClass(tableRef.current, prefix('column-resizing'));\n    } else {\n      removeClass(tableRef.current, prefix('column-resizing'));\n    }\n  }, [prefix, tableRef]);\n  var columnWidths = useRef({});\n  useUpdateEffect(function () {\n    clearCache();\n  }, [children, sortColumn, sortType, tableWidth.current, scrollX.current, minScrollX.current]);\n  useUpdateEffect(function () {\n    columnWidths.current = {};\n  }, [children]);\n  var handleColumnResizeEnd = useCallback(function (columnWidth, _cursorDelta, dataKey, index) {\n    columnWidths.current[dataKey + \"_\" + index + \"_width\"] = columnWidth;\n    setColumnResizing(false);\n\n    if (mouseAreaRef.current) {\n      addStyle(mouseAreaRef.current, {\n        display: 'none'\n      });\n    }\n\n    clearCache();\n    onHeaderCellResize === null || onHeaderCellResize === void 0 ? void 0 : onHeaderCellResize(columnWidth, dataKey);\n  }, [clearCache, mouseAreaRef, onHeaderCellResize, setColumnResizing]);\n  var handleColumnResizeMove = useCallback(function (width, left, fixed) {\n    var mouseAreaLeft = width + left;\n    var x = mouseAreaLeft;\n    var dir = 'left';\n\n    if (rtl) {\n      mouseAreaLeft += minScrollX.current + SCROLLBAR_WIDTH;\n      dir = 'right';\n    }\n\n    if (!fixed) {\n      x = mouseAreaLeft + (rtl ? -scrollX.current : scrollX.current);\n    }\n\n    if (mouseAreaRef.current) {\n      var _addStyle;\n\n      addStyle(mouseAreaRef.current, (_addStyle = {\n        display: 'block'\n      }, _addStyle[dir] = x + \"px\", _addStyle));\n    }\n  }, [minScrollX, mouseAreaRef, rtl, scrollX]);\n  var handleColumnResizeStart = useCallback(function (width, left, fixed) {\n    setColumnResizing(true);\n    handleColumnResizeMove(width, left, fixed);\n  }, [handleColumnResizeMove, setColumnResizing]);\n  var handleSortColumn = useCallback(function (dataKey) {\n    var nextSortType = sortType;\n\n    if (sortColumn === dataKey) {\n      nextSortType = sortType === SORT_TYPE.ASC ? SORT_TYPE.DESC : SORT_TYPE.ASC;\n      setSortType(nextSortType);\n    }\n\n    onSortColumn === null || onSortColumn === void 0 ? void 0 : onSortColumn(dataKey, nextSortType);\n  }, [onSortColumn, setSortType, sortColumn, sortType]);\n\n  if (cacheData) {\n    return cacheData;\n  }\n\n  var hasCustomTreeCol = false;\n  var left = 0; // Cell left margin\n\n  var headerCells = []; // Table header cell\n\n  var bodyCells = []; // Table body cell\n\n  if (!children) {\n    var _cacheCell = {\n      columns: [],\n      headerCells: headerCells,\n      bodyCells: bodyCells,\n      hasCustomTreeCol: hasCustomTreeCol,\n      allColumnsWidth: left\n    };\n    setCacheData(_cacheCell);\n    return _cacheCell;\n  }\n\n  var columns = getTableColumns(children);\n  var count = columns.length;\n\n  var _getTotalByColumns = getTotalByColumns(columns),\n      totalFlexGrow = _getTotalByColumns.totalFlexGrow,\n      totalWidth = _getTotalByColumns.totalWidth;\n\n  React.Children.forEach(columns, function (column, index) {\n    if ( /*#__PURE__*/React.isValidElement(column)) {\n      var _columnWidths$current;\n\n      var columnChildren = column.props.children;\n      var columnProps = getColumnProps(column);\n      var _width = columnProps.width,\n          resizable = columnProps.resizable,\n          flexGrow = columnProps.flexGrow,\n          minWidth = columnProps.minWidth,\n          onResize = columnProps.onResize,\n          treeCol = columnProps.treeCol;\n\n      if (treeCol) {\n        hasCustomTreeCol = true;\n      }\n\n      if (resizable && flexGrow) {\n        console.warn(\"Cannot set 'resizable' and 'flexGrow' together in <Column>, column index: \" + index);\n      }\n\n      if (columnChildren.length !== 2) {\n        throw new Error(\"Component <HeaderCell> and <Cell> is required, column index: \" + index + \" \");\n      }\n\n      var headerCell = columnChildren[0];\n      var cell = columnChildren[1];\n      var cellWidth = ((_columnWidths$current = columnWidths.current) === null || _columnWidths$current === void 0 ? void 0 : _columnWidths$current[cell.props.dataKey + \"_\" + index + \"_width\"]) || _width || 0;\n\n      if (tableWidth.current && flexGrow && totalFlexGrow) {\n        cellWidth = Math.max((tableWidth.current - totalWidth) / totalFlexGrow * flexGrow, minWidth || 60);\n      }\n\n      var cellProps = _extends({}, omit(columnProps, ['children']), {\n        'aria-colindex': index + 1,\n        left: left,\n        headerHeight: headerHeight,\n        key: index,\n        width: cellWidth,\n        height: typeof rowHeight === 'function' ? rowHeight() : rowHeight,\n        firstColumn: index === 0,\n        lastColumn: index === count - 1\n      });\n\n      if (showHeader && headerHeight) {\n        var headerCellProps = {\n          // Resizable column\n          // `index` is used to define the serial number when dragging the column width\n          index: index,\n          dataKey: cell.props.dataKey,\n          isHeaderCell: true,\n          minWidth: columnProps.minWidth,\n          sortable: columnProps.sortable,\n          onSortColumn: handleSortColumn,\n          sortType: sortType,\n          sortColumn: sortColumn,\n          flexGrow: flexGrow\n        };\n\n        if (resizable) {\n          merge(headerCellProps, {\n            onResize: onResize,\n            onColumnResizeEnd: handleColumnResizeEnd,\n            onColumnResizeStart: handleColumnResizeStart,\n            onColumnResizeMove: handleColumnResizeMove\n          });\n        }\n\n        headerCells.push( /*#__PURE__*/React.cloneElement(headerCell, _extends({}, cellProps, headerCellProps)));\n      }\n\n      bodyCells.push( /*#__PURE__*/React.cloneElement(cell, cellProps));\n      left += cellWidth;\n    }\n  });\n  var cacheCell = {\n    columns: columns,\n    headerCells: headerCells,\n    bodyCells: bodyCells,\n    allColumnsWidth: left,\n    hasCustomTreeCol: hasCustomTreeCol\n  };\n  setCacheData(cacheCell);\n  return cacheCell;\n};\n\nexport default useCellDescriptor;","map":{"version":3,"sources":["/Users/hackinghunter/Desktop/1.maxlence react js/MaxHr/node_modules/rsuite-table/es/utils/useCellDescriptor.js"],"names":["_extends","React","useState","useCallback","useRef","addStyle","addClass","removeClass","omit","merge","SCROLLBAR_WIDTH","SORT_TYPE","useControlled","getTableColumns","getTotalByColumns","getColumnProps","useUpdateEffect","useCellDescriptor","props","children","rtl","mouseAreaRef","tableRef","minScrollX","scrollX","tableWidth","headerHeight","showHeader","sortTypeProp","sortType","defaultSortType","sortColumn","rowHeight","onSortColumn","onHeaderCellResize","prefix","_useControlled","setSortType","_useState","cacheData","setCacheData","clearCache","setColumnResizing","resizing","current","columnWidths","handleColumnResizeEnd","columnWidth","_cursorDelta","dataKey","index","display","handleColumnResizeMove","width","left","fixed","mouseAreaLeft","x","dir","_addStyle","handleColumnResizeStart","handleSortColumn","nextSortType","ASC","DESC","hasCustomTreeCol","headerCells","bodyCells","_cacheCell","columns","allColumnsWidth","count","length","_getTotalByColumns","totalFlexGrow","totalWidth","Children","forEach","column","isValidElement","_columnWidths$current","columnChildren","columnProps","_width","resizable","flexGrow","minWidth","onResize","treeCol","console","warn","Error","headerCell","cell","cellWidth","Math","max","cellProps","key","height","firstColumn","lastColumn","headerCellProps","isHeaderCell","sortable","onColumnResizeEnd","onColumnResizeStart","onColumnResizeMove","push","cloneElement","cacheCell"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React, { useState, useCallback, useRef } from 'react';\nimport addStyle from 'dom-lib/addStyle';\nimport addClass from 'dom-lib/addClass';\nimport removeClass from 'dom-lib/removeClass';\nimport omit from 'lodash/omit';\nimport merge from 'lodash/merge';\nimport { SCROLLBAR_WIDTH, SORT_TYPE } from '../constants';\nimport useControlled from './useControlled';\nimport getTableColumns from './getTableColumns';\nimport getTotalByColumns from './getTotalByColumns';\nimport getColumnProps from './getColumnProps';\nimport useUpdateEffect from './useUpdateEffect';\n\n/**\n * Attach rendering-related attributes to all cells of the form and cache them.\n * @param props\n * @returns\n */\nvar useCellDescriptor = function useCellDescriptor(props) {\n  var children = props.children,\n      rtl = props.rtl,\n      mouseAreaRef = props.mouseAreaRef,\n      tableRef = props.tableRef,\n      minScrollX = props.minScrollX,\n      scrollX = props.scrollX,\n      tableWidth = props.tableWidth,\n      headerHeight = props.headerHeight,\n      showHeader = props.showHeader,\n      sortTypeProp = props.sortType,\n      defaultSortType = props.defaultSortType,\n      sortColumn = props.sortColumn,\n      rowHeight = props.rowHeight,\n      onSortColumn = props.onSortColumn,\n      onHeaderCellResize = props.onHeaderCellResize,\n      prefix = props.prefix;\n\n  var _useControlled = useControlled(sortTypeProp, defaultSortType),\n      sortType = _useControlled[0],\n      setSortType = _useControlled[1];\n\n  var _useState = useState(),\n      cacheData = _useState[0],\n      setCacheData = _useState[1];\n\n  var clearCache = useCallback(function () {\n    setCacheData(null);\n  }, []);\n  var setColumnResizing = useCallback(function (resizing) {\n    if (!tableRef.current) {\n      return;\n    }\n\n    if (resizing) {\n      addClass(tableRef.current, prefix('column-resizing'));\n    } else {\n      removeClass(tableRef.current, prefix('column-resizing'));\n    }\n  }, [prefix, tableRef]);\n  var columnWidths = useRef({});\n  useUpdateEffect(function () {\n    clearCache();\n  }, [children, sortColumn, sortType, tableWidth.current, scrollX.current, minScrollX.current]);\n  useUpdateEffect(function () {\n    columnWidths.current = {};\n  }, [children]);\n  var handleColumnResizeEnd = useCallback(function (columnWidth, _cursorDelta, dataKey, index) {\n    columnWidths.current[dataKey + \"_\" + index + \"_width\"] = columnWidth;\n    setColumnResizing(false);\n\n    if (mouseAreaRef.current) {\n      addStyle(mouseAreaRef.current, {\n        display: 'none'\n      });\n    }\n\n    clearCache();\n    onHeaderCellResize === null || onHeaderCellResize === void 0 ? void 0 : onHeaderCellResize(columnWidth, dataKey);\n  }, [clearCache, mouseAreaRef, onHeaderCellResize, setColumnResizing]);\n  var handleColumnResizeMove = useCallback(function (width, left, fixed) {\n    var mouseAreaLeft = width + left;\n    var x = mouseAreaLeft;\n    var dir = 'left';\n\n    if (rtl) {\n      mouseAreaLeft += minScrollX.current + SCROLLBAR_WIDTH;\n      dir = 'right';\n    }\n\n    if (!fixed) {\n      x = mouseAreaLeft + (rtl ? -scrollX.current : scrollX.current);\n    }\n\n    if (mouseAreaRef.current) {\n      var _addStyle;\n\n      addStyle(mouseAreaRef.current, (_addStyle = {\n        display: 'block'\n      }, _addStyle[dir] = x + \"px\", _addStyle));\n    }\n  }, [minScrollX, mouseAreaRef, rtl, scrollX]);\n  var handleColumnResizeStart = useCallback(function (width, left, fixed) {\n    setColumnResizing(true);\n    handleColumnResizeMove(width, left, fixed);\n  }, [handleColumnResizeMove, setColumnResizing]);\n  var handleSortColumn = useCallback(function (dataKey) {\n    var nextSortType = sortType;\n\n    if (sortColumn === dataKey) {\n      nextSortType = sortType === SORT_TYPE.ASC ? SORT_TYPE.DESC : SORT_TYPE.ASC;\n      setSortType(nextSortType);\n    }\n\n    onSortColumn === null || onSortColumn === void 0 ? void 0 : onSortColumn(dataKey, nextSortType);\n  }, [onSortColumn, setSortType, sortColumn, sortType]);\n\n  if (cacheData) {\n    return cacheData;\n  }\n\n  var hasCustomTreeCol = false;\n  var left = 0; // Cell left margin\n\n  var headerCells = []; // Table header cell\n\n  var bodyCells = []; // Table body cell\n\n  if (!children) {\n    var _cacheCell = {\n      columns: [],\n      headerCells: headerCells,\n      bodyCells: bodyCells,\n      hasCustomTreeCol: hasCustomTreeCol,\n      allColumnsWidth: left\n    };\n    setCacheData(_cacheCell);\n    return _cacheCell;\n  }\n\n  var columns = getTableColumns(children);\n  var count = columns.length;\n\n  var _getTotalByColumns = getTotalByColumns(columns),\n      totalFlexGrow = _getTotalByColumns.totalFlexGrow,\n      totalWidth = _getTotalByColumns.totalWidth;\n\n  React.Children.forEach(columns, function (column, index) {\n    if ( /*#__PURE__*/React.isValidElement(column)) {\n      var _columnWidths$current;\n\n      var columnChildren = column.props.children;\n      var columnProps = getColumnProps(column);\n      var _width = columnProps.width,\n          resizable = columnProps.resizable,\n          flexGrow = columnProps.flexGrow,\n          minWidth = columnProps.minWidth,\n          onResize = columnProps.onResize,\n          treeCol = columnProps.treeCol;\n\n      if (treeCol) {\n        hasCustomTreeCol = true;\n      }\n\n      if (resizable && flexGrow) {\n        console.warn(\"Cannot set 'resizable' and 'flexGrow' together in <Column>, column index: \" + index);\n      }\n\n      if (columnChildren.length !== 2) {\n        throw new Error(\"Component <HeaderCell> and <Cell> is required, column index: \" + index + \" \");\n      }\n\n      var headerCell = columnChildren[0];\n      var cell = columnChildren[1];\n      var cellWidth = ((_columnWidths$current = columnWidths.current) === null || _columnWidths$current === void 0 ? void 0 : _columnWidths$current[cell.props.dataKey + \"_\" + index + \"_width\"]) || _width || 0;\n\n      if (tableWidth.current && flexGrow && totalFlexGrow) {\n        cellWidth = Math.max((tableWidth.current - totalWidth) / totalFlexGrow * flexGrow, minWidth || 60);\n      }\n\n      var cellProps = _extends({}, omit(columnProps, ['children']), {\n        'aria-colindex': index + 1,\n        left: left,\n        headerHeight: headerHeight,\n        key: index,\n        width: cellWidth,\n        height: typeof rowHeight === 'function' ? rowHeight() : rowHeight,\n        firstColumn: index === 0,\n        lastColumn: index === count - 1\n      });\n\n      if (showHeader && headerHeight) {\n        var headerCellProps = {\n          // Resizable column\n          // `index` is used to define the serial number when dragging the column width\n          index: index,\n          dataKey: cell.props.dataKey,\n          isHeaderCell: true,\n          minWidth: columnProps.minWidth,\n          sortable: columnProps.sortable,\n          onSortColumn: handleSortColumn,\n          sortType: sortType,\n          sortColumn: sortColumn,\n          flexGrow: flexGrow\n        };\n\n        if (resizable) {\n          merge(headerCellProps, {\n            onResize: onResize,\n            onColumnResizeEnd: handleColumnResizeEnd,\n            onColumnResizeStart: handleColumnResizeStart,\n            onColumnResizeMove: handleColumnResizeMove\n          });\n        }\n\n        headerCells.push( /*#__PURE__*/React.cloneElement(headerCell, _extends({}, cellProps, headerCellProps)));\n      }\n\n      bodyCells.push( /*#__PURE__*/React.cloneElement(cell, cellProps));\n      left += cellWidth;\n    }\n  });\n  var cacheCell = {\n    columns: columns,\n    headerCells: headerCells,\n    bodyCells: bodyCells,\n    allColumnsWidth: left,\n    hasCustomTreeCol: hasCustomTreeCol\n  };\n  setCacheData(cacheCell);\n  return cacheCell;\n};\n\nexport default useCellDescriptor;"]},"metadata":{},"sourceType":"module"}